# 개발 환경용 Docker Compose
# API와 Postgres만 도커에서 실행
# Frontend는 로컬에서 개발 서버로 실행 (코드 수정 즉시 반영)
# 사용법: docker-compose -f docker-compose.dev.yml up -d

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: pgvector/pgvector:pg18
    container_name: seoul_housing_postgres
    environment:
      POSTGRES_DB: ${PG_DB:-rey}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-post1234}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8 --auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/services/db/schema/housing_schema.sql:/docker-entrypoint-initdb.d/01_housing_schema.sql
      - ./backend/services/db/schema/infra_schema.sql:/docker-entrypoint-initdb.d/02_infra_schema.sql
      - ./backend/services/db/schema/rtms_schema.sql:/docker-entrypoint-initdb.d/03_rtms_schema.sql
    networks:
      - housing_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rey"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API 서버 (개발 모드)
  api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: seoul_housing_api
    environment:
      - DATABASE_URL=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-post1234}@postgres:5432/${PG_DB:-rey}
      - ENV=development
      - ENVIRONMENT=development
      - SECRET_KEY=your-secret-key-here
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DB=${PG_DB:-rey}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASSWORD=${PG_PASSWORD:-post1234}
      # Ollama 접근: 도커 컨테이너에서 호스트의 Ollama에 접근
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
    ports:
      - "8000:8000"
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - ./backend:/app/backend # 코드 마운트 (코드 수정 시 자동 반영)
      # HuggingFace 모델 캐시 마운트 (로컬에 영구 저장)
      - ~/.cache/huggingface:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - housing_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/llm/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend는 이 파일에서 제외 (로컬에서 npm run dev로 실행)

volumes:
  postgres_data:

networks:
  housing_network:
    driver: bridge
