services:
  # PostgreSQL 데이터베이스
  postgres:
    image: pgvector/pgvector:pg18
    container_name: seoul_housing_postgres
    environment:
      POSTGRES_DB: ${PG_DB:-rey}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-post1234}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8 --auth-host=scram-sha-256"
    ports:
      - "55432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/services/db/schema/housing_schema.sql:/docker-entrypoint-initdb.d/01_housing_schema.sql
      - ./backend/services/db/schema/infra_schema.sql:/docker-entrypoint-initdb.d/02_infra_schema.sql
      - ./backend/services/db/schema/rtms_schema.sql:/docker-entrypoint-initdb.d/03_rtms_schema.sql
    networks:
      - housing_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rey"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (캐싱 및 세션 관리) - 현재 미사용
  # redis:
  #   image: redis:7-alpine
  #   container_name: seoul_housing_redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - housing_network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes

  # #API 서버 (메인)
  # api:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: seoul_housing_api
  #   environment:
  #     - DATABASE_URL=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-post1234}@postgres:5432/${PG_DB:-rey}
  #     # - REDIS_URL=redis://redis:6379
  #     - ENVIRONMENT=production
  #     - SECRET_KEY=your-secret-key-here
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./backend/data:/app/data
  #     - ./backend/logs:/app/logs
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     # redis:
  #     #   condition: service_started
  #   networks:
  #     - housing_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # #프론트엔드 웹 애플리케이션 : 리액트
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: seoul_housing_frontend
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000
  #     - REACT_APP_ENVIRONMENT=production
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - api
  #   networks:
  #     - housing_network
  #   restart: unless-stopped

  # Nginx (리버스 프록시) - 현재 미사용 (배포 시 필요)
  # nginx:
  #   image: nginx:alpine
  #   container_name: seoul_housing_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - api
  #   networks:
  #     - housing_network
  #   restart: unless-stopped

  # 크롤링 스케줄러 (Celery) - 현재 미사용 (Celery 구현 필요)
  # crawler:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: seoul_housing_crawler
  #   command: celery -A app.celery worker --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-post1234}@postgres:5432/${PG_DB:-rey}
  #     - REDIS_URL=redis://redis:6379
  #   volumes:
  #     - ./backend/data:/app/data
  #     - ./backend/logs:/app/logs
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - housing_network
  #   restart: unless-stopped

  # 크롤링 스케줄러 (Celery Beat) - 현재 미사용 (Celery 구현 필요)
  # crawler_scheduler:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: seoul_housing_crawler_scheduler
  #   command: celery -A app.celery beat --loglevel=info
  #   environment:
  #     - DATABASE_URL=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-post1234}@postgres:5432/${PG_DB:-rey}
  #     - REDIS_URL=redis://redis:6379
  #   volumes:
  #     - ./backend/data:/app/data
  #     - ./backend/logs:/app/logs
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - housing_network
  #   restart: unless-stopped

  # 모니터링 (Grafana) - 현재 미사용 (모니터링 필요 시 활성화)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: seoul_housing_grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - housing_network
  #   restart: unless-stopped

volumes:
  postgres_data: # PostgreSQL 데이터 영구 저장
  # redis_data:   # Redis 사용 시 활성화
  # grafana_data: # Grafana 사용 시 활성화

networks:
  housing_network:
    driver: bridge
