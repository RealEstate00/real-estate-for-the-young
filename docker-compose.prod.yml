# 프로덕션 환경용 Docker Compose
# 모든 서비스(API, Frontend, Postgres)를 도커에서 실행
# Docker Hub에서 이미지를 pull하여 사용
# 사용법: docker-compose -f docker-compose.prod.yml up -d

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: pgvector/pgvector:pg18
    container_name: seoul_housing_postgres
    environment:
      POSTGRES_DB: ${PG_DB:-rey}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-post1234}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8 --auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/services/db/schema/housing_schema.sql:/docker-entrypoint-initdb.d/01_housing_schema.sql
      - ./backend/services/db/schema/infra_schema.sql:/docker-entrypoint-initdb.d/02_infra_schema.sql
      - ./backend/services/db/schema/rtms_schema.sql:/docker-entrypoint-initdb.d/03_rtms_schema.sql
    networks:
      - housing_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rey"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API 서버 - Docker Hub에서 이미지 pull
  api:
    # Docker Hub 이미지: jina1003/seoul-housing-api:latest
    image: jina1003/seoul-housing-api:latest
    container_name: seoul_housing_api
    environment:
      - DATABASE_URL=postgresql://${PG_USER:-postgres}:${PG_PASSWORD:-post1234}@postgres:5432/${PG_DB:-rey}
      - ENV=production
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DB=${PG_DB:-rey}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASSWORD=${PG_PASSWORD:-post1234}
    ports:
      - "8000:8000"
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      # 프로덕션에서는 코드 마운트하지 않음 (이미지에 포함됨)
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - housing_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/llm/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 프론트엔드 - Docker Hub에서 이미지 pull (빌드된 정적 파일을 Nginx로 서빙)
  frontend:
    # Docker Hub 이미지: jina1003/seoul-housing-frontend:latest
    image: jina1003/seoul-housing-frontend:latest
    container_name: seoul_housing_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - housing_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  housing_network:
    driver: bridge
